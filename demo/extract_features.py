from subprocess import call
from defusedxml import ElementTree
import os 
import sys
import json 
import numpy as np
from termcolor import colored

def extract(file):
    rc = call("../extract_apk_demo.sh", shell=True)
    #parse_xml
    root_dir = os.getcwd()
    directory="../demo_apk"
    # for i, directory in enumerate(['benign_apk', 'malicious_apk']):
    os.chdir(directory)
    category_root_dir = os.getcwd()
    filename = file

    with open("../model_training/app_feature_vectors.json") as infile:
        dataset = json.load(infile)

    features = np.array(dataset['features'])
    #print(features)
    vector = [0]*len(features)
    #print(vector)

    # for filename in glob.glob('*.apk'):
    #print('Processing ' + filename)
    try:
        os.chdir(filename[:-4])
        with open('AndroidManifest.xml') as xml_file:
            et = ElementTree.parse(xml_file)
    except (ElementTree.ParseError, UnicodeDecodeError, FileNotFoundError):
        #print('Parsing error encountered for ' + filename)
        os.chdir(category_root_dir)
    app_name = filename
    # make a one-hot bit vector of length 2. 1st bit set if malicious, otherwise 2nd bit
    # app_malicious_map[app_name] = [1,0] if i else [0,1]
    permissions = et.getroot().findall('./uses-permission')
    all_permissions = []
    for permission in permissions:
        try:
            permission_name = permission.attrib['{http://schemas.android.com/apk/res/android}name'].upper()
            if not permission_name.startswith('ANDROID.PERMISSION'): continue # ignore custom permissions
            if permission_name not in all_permissions:
                all_permissions.append(permission_name)
        except:
            pass
    print(colored("API PERMISSIONS:", "blue"))
    for permission in all_permissions:
        try:
            result = np.where(features == permission)
            #print(result[0][0])
            vector[result[0][0]]=1
            print(colored("X","red"), end=" ")
            print(permission) 
        except:
            print(colored(" ","red"), end=" ")
            print(permission)
            pass
    try:
        #print('Processing ' + filename)
        all_methods = []
        with open('disassembled.code') as disassembled_code:
            app_name = filename
            # make a one-hot bit vector of length 2. 1st bit set if malicious, otherwise 2nd bit
            # parse the file and record any interesting methods
            for line in disassembled_code.readlines():
                try:
                    method = line.split('// Method ')[1].split(':')[0]
                    #if not method.startswith('java') and not method.startswith('android'):
                    if not method.startswith('java'):
                        continue
                    # Comment the below line to use methods rather than classes
                    method = method.split('.')[0]
                    # the method is probably obfuscated; ignore it
                    if len(method.split('/')[-1]) < 4 or len(method.split('/')[-2]) == 1:
                        continue
                    if method not in all_methods:
                        all_methods.append(method)
                except:
                    continue

        print(colored("API METHODS:", "yellow"))
        for method in all_methods:
            try:
                result = np.where(features == method)
                #print(result[0][0])
                vector[result[0][0]]=1
                print(colored("X","red"), end=" ")
                print(method) 
            except:
                print(colored(" ","red"), end=" ")
                print(method)
                pass
    except FileNotFoundError as e:
        print(e)
    finally:
        os.chdir(category_root_dir)
        os.chdir(root_dir)
    #print(vector)
    return vector