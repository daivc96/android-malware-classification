#Basic classification: Classify Android malwares
import json
import sys

# TensorFlow and tf.keras
import tensorflow as tf

# Helper libraries
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# Import the datasets from CIC 
with open(sys.argv[1]) as infile:
    dataset = json.load(infile)

app_names = [app for app in dataset['apps']]
features = np.array(dataset['features'])
train_files = np.array([np.array(dataset['apps'][app]['vector']) for app in app_names])
print(train_files.shape)
train_labels = np.array([dataset['apps'][app]['malicious'][0] for app in app_names])

test_files = np.array([dataset['apps'][app]['vector'] for app in app_names])
test_labels = np.array([dataset['apps'][app]['malicious'][0] for app in app_names])

class_names = ['benign', 'malicious']

## Explore the data

# print(train_files.shape)
# print(len(train_labels))
# print(train_labels)
# print(test_files.shape)
# print(len(test_labels))

## Build the model
### Set up the layers
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(100, )),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10)
])

### Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

## Train the model
### Feed the model
model.fit(train_files, train_labels, epochs=10)
model.save('saved_model/model_android_malware_classification') 
test_loss, test_acc = model.evaluate(test_files,  test_labels, verbose=2)

print('\nTest accuracy:', test_acc)

### Make predictions
probability_model = tf.keras.Sequential([model, 
                                         tf.keras.layers.Softmax()])

predictions = probability_model.predict(test_files)
# print(app_names[190])
# print(predictions[190])
# print(np.argmax(predictions[190]))
# print(test_labels[190])

## Use the trained model
file = test_files[190]
print(file.shape)
file = (np.expand_dims(file,0))
print(file.shape)
predictions_single = probability_model.predict(file)

print(predictions_single)

print(np.argmax(predictions_single[0]))